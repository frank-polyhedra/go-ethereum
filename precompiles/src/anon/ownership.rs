use crate::{
    utils::{self, bytes_asset, check_address_format_from_folding},
    Error, Result,
};
use alloc::vec::Vec;
use ethabi::ParamType;
use hypr_algebra::{bn254::BN254Scalar, serialization::FromToBytes};
use hypr_api::{
    anon_xfr::{
        ownership::{verify_ownership_note, OwnershipBody, OwnershipNote},
        AXfrAddressFoldingInstance, AXfrPlonkPf,
    },
    parameters::VerifierParams,
};
use sha3::{Digest, Sha3_512};

pub struct OwnerShip {
    root_version: u64,
    amount: u128,
    asset: Vec<u8>,
    nullifier: Vec<u8>,
    proof: Vec<u8>,
    // folding_instance: Vec<u8>,
    merkle_root: [u8; 32],
    hash: Vec<u8>,
}

impl OwnerShip {
    fn params_type() -> [ParamType; 7] {
        let bytes32 = ParamType::FixedBytes(32);
        let uint256 = ParamType::Uint(256);
        let bytes = ParamType::Bytes;

        /*
            uint256 root_version,
            uint256 amount,
            bytes asset
            bytes nullifier
            bytes proof
            bytes folding_instance
            bytes32 merkle_root
            bytes hash
        */
        [
            uint256.clone(),
            uint256,
            bytes.clone(),
            bytes.clone(),
            bytes.clone(),
            bytes32,
            bytes,
        ]
    }

    pub fn new(data: &[u8]) -> Result<Self> {
        let res = ethabi::decode(&Self::params_type(), data).map_err(|_| Error::ParseDataFailed)?;

        let root_version =
            utils::into_uint(res.get(0).cloned()).ok_or(Error::ParseDataFailed)? as u64;
        let amount = utils::into_uint(res.get(1).cloned()).ok_or(Error::ParseDataFailed)?;
        let asset = utils::into_bytes(res.get(2).cloned()).ok_or(Error::ParseDataFailed)?;
        let nullifier = utils::into_bytes(res.get(3).cloned()).ok_or(Error::ParseDataFailed)?;
        let proof = utils::into_bytes(res.get(4).cloned()).ok_or(Error::ParseDataFailed)?;
        // let folding_instance = utils::into_bytes(res.get(5).cloned())?;
        let merkle_root = utils::into_bytes32(res.get(5).cloned()).ok_or(Error::ParseDataFailed)?;
        let hash = utils::into_bytes(res.get(6).cloned()).ok_or(Error::ParseDataFailed)?;

        let r = Self {
            root_version,
            amount,
            asset,
            nullifier,
            proof,
            // folding_instance,
            merkle_root,
            hash,
        };

        Ok(r)
    }

    pub fn check(self) -> Result<()> {
        verify_ownership(
            self.root_version,
            self.amount,
            self.asset,
            self.nullifier,
            self.proof,
            self.merkle_root,
            self.hash,
        )
    }
    pub fn gas(self) -> u64 {
        OWNERSHIP_PER_FEE
    }
}

pub const OWNERSHIP_PER_FEE: u64 = 75000;

#[allow(clippy::too_many_arguments)]
fn verify_ownership(
    root_version: u64,
    amount: u128,
    asset: Vec<u8>,
    nullifier: Vec<u8>,
    proof: Vec<u8>,
    merkle_root: [u8; 32],
    hash: Vec<u8>,
) -> Result<()> {
    let (proof, folding_instance): (AXfrPlonkPf, AXfrAddressFoldingInstance) =
        bincode::deserialize(&proof).map_err(|_| Error::ProofDecodeFailed)?;
    let address_format = check_address_format_from_folding(&folding_instance);
    let asset = bytes_asset(&asset)?;
    let input = BN254Scalar::from_bytes(&nullifier).map_err(|_| Error::ParseDataFailed)?;
    let merkle_root = BN254Scalar::from_bytes(&merkle_root).map_err(|_| Error::ParseDataFailed)?;

    let note = OwnershipNote {
        body: OwnershipBody {
            input,
            asset,
            amount,
            merkle_root,
            merkle_root_version: root_version,
        },
        proof,
        folding_instance,
    };

    let mut hasher = Sha3_512::new();
    hasher.update(&hash);
    hasher.update(&bincode::serialize(&note.body).map_err(|_| Error::ParseDataFailed)?);

    let params = VerifierParams::get_ownership(address_format)
        .map_err(|_| Error::FailedToLoadVerifierParams)?;

    verify_ownership_note(&params, &note, &merkle_root, hasher)
        .map_err(|_| Error::ProofVerificationFailed)
}

#[cfg(test)]
mod test {
    use super::OwnerShip;

    #[test]
    fn test_len_1() {
        let encode = hex::decode("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160a87de24309bf8ba57890730a2705c0df8af512dea01d75bea6345a10c1f4e20f0000000000000000000000000000000000000000000000000000000000000d400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000cf4b43b2e2407d12f1baf349cbede13b2a739ce50000000000000000000000000000000000000000000000000000000000000020592d8d03ac161f8e606b967ad87b7079ed0659107066f3c4b26919451f115f1c0000000000000000000000000000000000000000000000000000000000000bab05000000000000002000000000000000c5a11ac788b7b68b3a002621341bf1e3a5b8d80ea477111c804a6969d025b9ae20000000000000006f85bbe45dfa55b6b863a6d760bbbad7572839e03027fdba6d0798abfce2239b20000000000000003d4f3e135f187ece3d86bc64bfd80cbb6390956d9ebbf05c03c0d516d7aa421220000000000000005014c58e208eb977187835a5e4eb9b474e025d974b15288778cfdd578a9c1704200000000000000006c63d211224d1daa28b48439e6ed47c62599348b1ea4b106095a683f2eed21605000000000000002000000000000000b42fdd63358b56a4413f54315944e2ff522b7b5e88e0ec7aa3c08ef79345789a200000000000000072075528369ea9097eb768731a1b32cdeabbf56d73174c1a1103839a7c1b342f2000000000000000c18f26435bb5e5c65d7be13e8a27470dc98595e5dbca101fffd8d6413feb96142000000000000000fdac9e725f38bff1424be37c1f7d447eb09814413c4ef865e3f0e6c684fe2e9f200000000000000082d649fb4db687b5aabbcaa9bf5bc86dd32b76817bb9cb04618ad8ef64c7fc022000000000000000d5feece8c8e1e380569ea5fe41acb812392b35820cc7dc92303d75f8497dbf8f2000000000000000e8fce0ab7a23ed9c913f1f039fd914422d3e11f8dd2f2295c818a83d549df11a20000000000000000ab1ba523a669e1c9b919b25b089e44f83355eda0bb03f27cbac0da7a9cdeb1c0500000000000000200000000000000063457468b995323cc2ad3815f0d1291537aa070347ee0466296cfd3505bd28272000000000000000cc7bfb00793817982097d8069da84804b53f09f0527fd38798b26e5109af1c0620000000000000005bc6c7b60af3095b3ca8212e39887c594ab10b5df2e79a2cf63630aee8396a1c20000000000000008ad2cf38e8629890ea98d9b7b4b6af7fdfb06abbf929979c8cd2f81d2184162c2000000000000000512cc9694d002deb978c53ef5413a0731b06dcb7e8f539cd62ec891178a5951c030000000000000020000000000000003ca92cdfef6781ce567253767eb4467c04baf3dbf516fa6d6829e3e0b1c6010420000000000000006d4a361a3719d1ae96f86fdc8eafa825ba570297a1a4ebabc0b78a94b31a62072000000000000000adccebd1d7eaed34fbee0ea0dcaa941efa8800bd51f9c5aad7caa776b7cdfa1a2000000000000000d4681a0d82b8a9dae0d029916b8fa77af473fb8d5a1512a1f77eca605bb35b0604000000000000002000000000000000d3487a8220d3ca005af4d026ac78fd65d0722f963691eae7072bb22db0099e012000000000000000f18310c4e37a9f5852715a33b87c2d90f82fa28cfbf3f22e2b6f3aa9e8990f2d20000000000000004744e0d0fab0ed7320633b37c242389d62f6802630ac0f23d185afb7ba5a982e20000000000000002b005143f2ecd1f89b17d2b2e2a6b95a8fdbd03596e12161482839a258c7782620000000000000001e029b9e2960c007dc4109b41337ac7c9aefe1c911280dfd9e33d9f6142df7182000000000000000fa69993cd9eda6a56588a57c00932f6fc6e05b9184a4663f2c3cd2209c7b7d990000000020000000000000006ad07ffead2eed32f4891ebee60875386ce71ca67602b97096c34aaf96f7c40a03000000000000002100000000000000ed96753bc7460198c38e532dd7486bf6c9bbbaa637acceab6fd3b5cc0fcbee38002100000000000000c77450b4b53e656bda4fb289b746166cfd63686885bd2873c74ee5b4bbad6c8c802100000000000000b945a40d499fb4a7bf7063f4371b0a64e6c2374449cbf100784e35ad96012be3000300000000000000200000000000000095cf147e128ef2d75b153a30cc37f7adedaacafea1781a05c82b0b3140946ca520000000000000003a1c389e5b73a504bdd545a4c46235d4ddeab525264e35cf08980c4d5adf3a6920000000000000001b64248cbd83cf96c16d3eb2f32c2c53bbd8e81cf8d6e11e55696a93031194722000000000000000fddb91ca10c9f3cb753dcf781bed95677700149968b91bc984123db4601b14052000000000000000286c20a0d4642bc1980d84409f3ca7f95c994af6bd41cd69a0ed19385e49dee520000000000000000819e99897c4c4a8a24077310db8a55331d231a682845967eaff8c78ddc0980003000000000000002100000000000000db5dedf36f5ce8e3173ac513ac957d0b5efb2ea1b667c632c4ca91bed8620fae002100000000000000c1a1ba2327d1ac72c8a9db3ff4dbf3272b68a73e0a4aca15dc6139cf80c1900c0021000000000000003d2540df801699ee3d71f5ae3c200965f16efaeed9bbfd6a35f726bb6dafbc3180f1040000000000007cd6cd6238b7f458d9d418a2162577bf9da7106dd7990b92425f20a752296dc180ac52afb603d2e077cfb601d0acfe967f02bd1b8175a76a5e3ff1276c447c5b58009119a2d53f0aa1e34e5352ca597a51043acf00d299fc66adc4ed293671ad658800000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000040dad1f0bfc18c856edb0c7f4bfac9e6b05e0837ea473dd2173f7cb6e56b4a3eb7000c4d7e76a623b8038116ef57ceec47a514fa96ee71d69989130bc54b464649f800938113b75e29d032f3d8e995767ab6975edf6fb901d2c04a1ec5463bed289a7b80b6a335bec920e6b4d0970730ebb41cc5a613bd154acbfe9f1d895e99e59e3fd98075a96f4aacd01099e7248cc447667aa64d66b2cf40cd93305b0d64a91257a3cd80bae1cf1a6880cbafbb2c031f980b9ce4ef8eb21b750d7c4d27686dae0fc8bed7ce0f84b3bcf6f3885817374832eebe40c6b72f25f7bfdf041249c5e2bdfe0061053dc3933b9943209ac9456f34b8f013ccf544fe4b8f2b1c8956c8d9a00d197c0b00000000000000ae683e80b1e418423ad2311b509ec4906d7c535e12af3dc176005e6f37e2db7f80484ff90d1400465c196a0bea07c25f4ca44b528c6fad08d19174a99c819cf18600027a2e24df0657ba46d96416dadc6fcc68adca708b670567edbb910ac372df580057da29ad805007083211dba90e0b36da84e2c8d3e8b46e19bfc9ae6f975c25688015580b35cde672c2924fabc7b06c1a2d54621e5cbe0b35d94d98b0bd174d2ab8802409af84793ce7eb46435d64bd9fb0f6d48d83c78889b3ad8e321f48716e4b8800b3ff88442f7cf6056191a840ccb7183372039dd8a9b5bbbd1cf7293a7cd24611003e5c48ec5ce763edc4123ec95923a1c92a066f7b09de07a1a3546a7b5896ac9480cae5760cde9f948da113061ee641f3bb150181fef8ae184bdb8c5444e385d395007c7479136689be45dc49a2031dce898d8527e98481862311d87efc62bfbde912808866f61a31e39d85ba9da1377058acfc364cb9ea008561305996f813e0cdf5b8000b0000000000000087ac1e67d1923f5e8af90b9da3b11248b19d25654fc8c9068a7de3b7c892f55b80b2e218b94227be88eb8878fbf620a4c0fb2ad506c1e8e28cfcf20170e0841f3d001f73eedda422d3ed6024f833e708560477d6f791c15f8210f7af63e7f9fe314180ab7d269692afae5f36fd2ea6b75e3d48ef56fbf90fd56f700c05e8dfffb5548200291ed8bec7c55c6af0e9849fc92f64dd7a7e2873c7ac39836b0e319f9438c16d80176c10ec9b68a2b18fa91a1516c319ef5251851ae1953e39e455565996d667e0005b5cf505799b1a23af11435845eac98936095869417c03653cb23bfecc1ff3dc00e673760bae3365f926aeb76844122758aa633625b8cbe2dbb13863514df3250b00a0efa20b3f6d546d53122cc920ca15555ab25cb86478e2a9899b71991797c8eb805a52de795a794977915a8146ee2fdfc90f36ad17134afe9801a46de7927336bd00a76cb65eace6de04394ee3b2fb8df4da8f98b9f097458f64f889f368f4f0ce2b800161a31d5c347cb1ac1e5164794ae1dffcd971dc6f725b05be72636f072857c0576ca5929266ef0b4150b0ccd85810441536c341dae3396006d31cc883fec64700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000").unwrap();

        let res = OwnerShip::new(&encode);
        match res {
            Err(_v) => {
                //println!("err {}", v.code());
            }
            Ok(_) => {
                //println!("ok");
            }
        }
    }

    #[test]
    fn test_2() {
        let encode = hex::decode("0000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016049f75e0773d66e5553b634a1befcc7585c30839ae08da913d542e893324b06180000000000000000000000000000000000000000000000000000000000000d400000000000000000000000000000000000000000000000000000000000000020fb0b96e36da88785094f4bbc87fbae15eff81354a80307c3fc73ec5bdc934b8100000000000000000000000000000000000000000000000000000000000000209abe27e9dc9508dbb01f91edf0985159194df253404175e9d8c630aae44a7e0f0000000000000000000000000000000000000000000000000000000000000bab05000000000000002000000000000000620efba416004c9711680eb7edadac70062e7516efe054934b0b1acdc2a63697200000000000000034468f00ab107a453e952f1fb52b2d76f783eb6ed74864301149c80f67d7c9802000000000000000409cf0453ee0f42a3af331b35005d24972f9d052cd74a8a68c0b4ec3cee0ce1820000000000000001f1dc7c0004cf40d9e0579ff1ec9a8e182e801132cd536b93c8dc5fe590c6aab20000000000000003c9bfe4a5f1fabe3322dc7e93f58858ae541b02410af50f17763a4950f77302d0500000000000000200000000000000029ee65ff7a7f32427f07a4d40449fdad21bf08e5e516304b0aba0a84dc015f2b2000000000000000f64e38c6d78df8b9b123f4f58b1dc26bca9576d641c6d621870a9e0e05ea150420000000000000009ee443c8ba027196138e0cfe44a2178703b39c4019ba42bf77c3c049ab61e01120000000000000000838574f9a9f9c5e444bd769571101d3f5d2c859be6a3ebd8ef295445c1a4c0e2000000000000000f02b13c4131e5302c591935c0e1cced35d64a29f89b5cf8079b9331305d8e39320000000000000008d511b68381bf11fbe3f2f3d697e097b344f0d1726def5dd3f5830a5db7a84a2200000000000000083c518eec9a4395b18dea76ea2249ddbb99d3562f745bf388892c7fa269b3d032000000000000000d1edbf4b7f1eca0e0c224f7fe03eaa605f3faad0a114a033c284ac3653a5ff20050000000000000020000000000000005eb21906221797ea7a58b28c31ab51fd7a2ce9789d998be740559bba9a04912020000000000000006ec76afd0caae9fb43518dec8727eca5769d12b990cb14cb4a9ec4bb0f4918052000000000000000988d9c64a5953a2ee2841e807885cba6e97a7135967bf643456be0358036150b20000000000000003ed839bafc2da4a5ea8f71768a0dfeea13a779f9ecc0b26f1b78e3bc5c39ec2920000000000000005168d5d0c64f35fdf7a6ad2d851da39b6d33c888cd9f38cacdb85d882b82851403000000000000002000000000000000f33a77af7d3d47cc8ca5806305d15f364c402162c8eca58ae521f11557c85c00200000000000000061f66f396590c82c0c5c425e3ade43d3cb5d9864db20cdd94f12142780dd9322200000000000000018e3ebbd2200c3b3ae105712bd4718c05552ed5148b69f043d974d66423a460420000000000000009feda042d467e9292f3d44b05d6a24789f7679f0abbbd92eceab25337544bc1e0400000000000000200000000000000073edff38f53062cc2e8128f1231c23ff53b7e6347c8de4f74387427e6c02bc072000000000000000fcbed6bee8b2a8a299f82dc89f344cf1107dcd744f24b7364816999ce331ee06200000000000000078a5ce63b2c91a7caf0f89c4c18e76fa9b6fdcf7027090eeada062260e16a62e2000000000000000b312138faa101ba51dcc492d565d1884e33e018e5bf1f6d9fa36ea121c8b0a1f200000000000000032eea362affb5e966146aa05bf80acc075d188586993d874e9ca2e1d1e7c970b2000000000000000d72b11b11c385f0fb0bef5d268efbe89175e50991fc8b644bbac60db2041dc1e000000002000000000000000b490f6b7528aea7ba38c21a7201778683f53b43683b88c8f163baf201500590103000000000000002100000000000000da62dc524abb24684b1db57efb99e829024b329d6b44c02e4aec524087d2921300210000000000000008d4e17c37f946a475d65ccc3083a7de2ca535badf475dd581f227a4137eae1c8021000000000000004faee0887453a159198d1bbd2507ec9767866c2603459abfaf9b6a04532f031300030000000000000020000000000000001999af45c76f902d4752e5cbe66d51af631345127c40da1c865a62d7f973c9e92000000000000000718b5ec002e98de01eff47751297de1a8331cf74e171cc22f0eb93e150ee2bd720000000000000005d13b1eda7ce820d7b533f8c8153e107ad393afa163e5653a139002e4465111020000000000000001980dd6f75a8c32f2d4f16a7cffb90663c369018479c56ed0b4acfd4cabb76ac2000000000000000fd3a097cfc76405e5a727bff38293ba645908be45276d588c4f7c7d54384ccda200000000000000078b4369e35acdee48d42a31c86c87c3af5ee589b06cc530a35b00502589305c903000000000000002100000000000000e137fbc5c97f844460d5edfdb20b0d7a329d3c419e1ea345c65b1844c5f29fb280210000000000000059d66c3d750abe8bc69015b8ca177f94ad89466651dba12d190ceefb79a7acc680210000000000000088fbf0f164e43efb04a34a5aa97bcb5da2f0633e9ef321e42f14f6c47cf5898100f104000000000000c4ca4d6d0a63ed7074e84402fcc0dab16d1454b3139eda7a3c7ad183ac217bac004d6954fcbfe3221a1979ebb8d838f8cce016ba57aadc88ba7c41ba7c0ada8ce7001ad21d912015e59ee5dba1455f7e74e91bd98120f8b8698c4d769b1424d2d7b4000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000406cbde5ce3bd8e931a496494c992e6153ff58c1ab4f478a439865ddcd2182a903009f03ef878c4aa5b9cab3afa6634d3a40bcd100a6e8ca5037bd70f9f8aeddd5f100f638e680b676504cbf4950bdf6351c2a0701adb5d15a667a65d46057e9e8ceca806df4ff13802e04a9f4213b2c19f5bb179e4bde89e9b060184af6377417a452eb80cca912555aa6317b045c3bd956353fc4cefb6e1d6582974f1931ac5b7dadbbba80e70f7f7216bbbf36c6535da4ef3ca2a733d91d8c3742afd4a98448560309d01f215b466b622613e0a7f520d484e988f87cb5392c6065e7c37225cf9b33cc8ef7964aedf102d89f8b0d95147d34af12cb5789b6c5df09bce5f6b1e6cab9172d0a0b00000000000000b1438a460373e77e13a208dd6aa09ab1bbdb693cd08b61503a491fccef5c7a9680250185511f39d9f56d252f36ebc029b112154e8dcf3199d6130a55a90152d4740036fad32aa2c8618bdb6bc96c21e78d93db0e628cb5b5b3da08b078fbb5dd1b450052281178be6d5862027f791d117b1c6705486b2a33638af34040b79f4f7d3b6d00da0f7a634b467e41e2f2266446a3f107fe1b06f33703874639353799ef86b71380aabe29486642eb8a2605c68c10235a896cb5dc89e07166cdb1a469ede3a6ca0d80ca122df55b02302a6a4c9446a362449ebaff1b7cf83dd9d1aabd4ef15ece9748805382856d3dea8fbe69f0049a391c1f0ab80a514d762ca623256d04fdf4b310ee80db7f82308aa88313eaeb52aa2db1590f4a7178393df3f6de17f957d184e1ddb100686ee9c1cbfd4ea6384dbefd17cc2044bb6b18b82b493ed36e86df069c47424800534e2e2e183aa5b9047bb37171e5fd1101dea702eae84fc6a4a1e384836da9d0000b000000000000000d4ecbbeb787196bbcc5868ae5d0c64708fd0e401dc6d737237548ed21ca2e2000b7e7341b900c0fc616e1171aec1c154bc570b52dc9b289107a47f17fe7ba3485800a9efbebd2083bba8c81a7d67bc549210772f0737c4ebfb0fac398dddd2d190a000e4816eb1ea19bb0f4a17c9b596be30fa532d225e44db5e330ebe69e52fa301d00df559fa43aa59c03b57fdbb75ddad691a938ded52f624bfd309f6be17b83bee300249aaadffec277a43f4602ef3f5b5824d5e50ce5f98d77d9a7ac8da418a2e1e780ec36cba893617c91dcc44b90c9293889313022a541d582701a7ac6411ac99a7500163d2d79d38909c936ffe104c12f62b791e1b245b3e0b0d5bea9606e1ae9e6eb007acc3477dcac8d584ef1abd8b317d40dc9f0c4f9315c2cfab99a1aaab4b16c9b004b4cb56848834e76b84c2b5cffa9168f42a5e8a468ee78302cf7a1932f93bdcd006a924497b2e44dcaf4fd0e82df44122af94979f534a97bf34c059043f069be7900343e89324301a9af4d6a4a545642ebbb9e9f176efbb267c32a22a7e9387a052268197c46236db128619c0e17a67b7b0c6878749d000edd277c47d9235fb85cf900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000").unwrap();
        let res = OwnerShip::new(&encode);
        match res {
            Err(_v) => {
                //println!("err {}", v.code());
            }
            Ok(_) => {
                //println!("ok");
            }
        }
    }
}
