package precompiles

import (
	"fmt"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/stretchr/testify/assert"
)

func TestPrecompilesAnonymous(t *testing.T) {
	a := &Anonymous{}
	t.Run("deposit t2a", func(t *testing.T) {
		inputData := "00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000680000000000000000000000000000000000000000000000000000000000000078000000000000000000000000000000000000000000000000000000000000000012e5cee2ca3c56caf722797738332415647acb7cdc28db468c20f40f422c53927000000000000000000000000000000000000000000000000000000000000000100000000000000000000000064d09e26eca6c9bf3779dbe856dad76d5184034000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000004563918244f4000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000048805000000000000002000000000000000a03a599a6f184a2c0a9075d63e06e98512e2e8b53674d583e642c2617c42dc132000000000000000e078c3b10f981b23c4a2fb5a74206172283c50c62c5aff96a76a4694380c45a82000000000000000f52401a6de1710bf054d29f8910595723240dee4e3e10882ce879ca1dec4419c20000000000000009080ce2b1abf88d99ff7eaca9bb2d15620dbe7a8c1a3d84a590c9f2c182c5fa9200000000000000076efba58d0edbe4cd68fca5ee5a07cc8327b0f63b8f091f707f5a025fab4a801050000000000000020000000000000006eeec7bd487b29d8ce94b3e0096fede1fd4718da799aa9f6e2c149cfe4a8f3902000000000000000b173e20007d72895bc6dcbe07016d88a9b4591e847d391c9fd160587ad42f09c200000000000000070ae9cff76c25c04cdf07eb9ac371528fb3b90a38a2ad05e3bb8237722787b2f2000000000000000edd6ea1018d01206191bfb7b2f55fbcaa9d837e0f299ff7897de3bc7789f480b20000000000000005f838d1dbab41abbf0324a0cdfd37d0f8fe0622a411a2721f318f034c3ab5b90200000000000000039f883c25110a2732e266a68824042655caf1683ec2b9255248648656c763b89200000000000000077520f8c9456044f1acd4cc63a7a6c29bdfeb0c2cac9d8aff1731ebf2ac131142000000000000000a6d928f19176c91f1601a27ddf1b0e9af0ab4e2a2e99095ec4ce184480c48c2405000000000000002000000000000000bb3a951ec1c019daef06b214c50e48c413cc85663c8594c716e9de368474832e200000000000000057214f686c42693ff0ad0c968ebbad92bd8f251595c61407d6731b9837999d1920000000000000007ce13bb74b2b006cdd226c3dc0cc60d4e0c83a9a81625afb9161a3b8bcb0c62c2000000000000000d4560ec12b74895e602e98f0d7e1d698e45f98170b260c12d2bc9f0c2bb8ff222000000000000000b278d666ed0447c461281a4795a77575e85588941d789a1c9c4b388c4eb47e0c03000000000000002000000000000000d5970f026d16519144d91a6ef32ef875ef729b45192313ed4999721668b3f02420000000000000008d08e45184a548d6a362533fc49e16931e741e7bcb9f55b6633408245b3ab62d2000000000000000b8ae8df67d8e81157e9377191041ff043ab22511d22e7298c367c5fa50b963042000000000000000cf616e557755aff09cc0824429bbea1d3b7c0ad2d2b679291d462a40ba14590204000000000000002000000000000000ad555915b8f6851df3c13197c084e8da4dd9273e5add80feb262dfc71b24db012000000000000000c801b08dd5486aeb7cbb4315930e9f601efb70885cad7d32246097c70314d01b2000000000000000228b2b2065b92721cf1845a3935cd966433d044c3b7887f3703f208681ac462220000000000000005ea149614ac39f39759fa868c05dc604f1cde2dc77ee7dcb8b1b44a883a28d05200000000000000013734d031356384e77085f0b5ce08383cbc974902d53b180f00fa6c5b5063e8e20000000000000007ff7b70ea9a69d9bd3e982f25037cc1bb8a5ed2572cc389bc0bbac4abb1fb626000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000081e6e9d2acb8271083b9d7ed2f741515e30df0dc6145f1e9ae574b7c429ecdb166809d105b0db9140f5a2bc500324f7cc44e08c292a4d08e725a9091345e24511b1a4c8a7178fb43f029fa8b6062a4441fdf06195bea4581050a1bd8838d9b0439763bf69fa8e08e4afa1728dffc225580fff806ede6ae018d3b1c8a02431a907202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ad210a311d4e33e4df3536e1463bde91a7c9867b76d1e9b69ae3e93297016cbc"
		inputBytes := []byte{0x29, 0xef, 0xb1, 0x48}

		inputBytes = append(inputBytes, common.Hex2Bytes(inputData)...)
		res, err := a.Run(inputBytes)
		assert.Nil(t, err)
		assert.Equal(t, byte(0), res[31])
	})

	t.Run("deposit t2a 2", func(t *testing.T) {
		inputData := "00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000bc00000000000000000000000000000000000000000000000000000000000000da00000000000000000000000000000000000000000000000000000000000000002a17fdb9199735f012ba3431b62491d2a7dbadd103bd3d934009aa277484da025a17fdb9199735f012ba3431b62491d2a7dbadd103bd3d934009aa277484da025000000000000000000000000000000000000000000000000000000000000000200000000000000000000000064d09e26eca6c9bf3779dbe856dad76d5184034000000000000000000000000064d09e26eca6c9bf3779dbe856dad76d5184034000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000004563918244f40000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000048805000000000000002000000000000000e45eb814b5026e1f8e6aaa76ac03fc28f9238132f150eb5b28574c43a4180eaf200000000000000033e6a308bac8b6c283fd4eb54e6fd618ef8dca2acd478106a48db8b39203de8620000000000000009e673f9500b3a7723a1ac4e56bbbdf09157cc36a96fc910a8c148f3e62ec6d132000000000000000d2919998cb09d10598b8cb9163b5cabf862d533b540a53adfa415b20f623aa10200000000000000058c0d0f1ab88efdc6d23511f8133088e0b7d2803c87f365a6f831b41eff41c2a05000000000000002000000000000000fd1138c68b0cbf6d27adc55e3c7ea5244e279e57d3a6083e73ef24b7ad08dbaf2000000000000000506bb7c46f518ce392aa9696351dd01fa4b7cc8035de1bad2b28096616bb35ab2000000000000000618ef1a3fcb175da8a835911021d20bb444cc1176afe1ebe4a4d7f02a8aee00d20000000000000006bfe2193a8265901e88fc30910fdc752365435542d7329c504b1a259174055ab20000000000000005f7ed0272991a0f81c37ad6b48c2d6a35c1757b8a8de966a593bde8706a6fbac2000000000000000b6199695cf9fc5cfa1d3fb060b280fdef270c03bc7c4e5b2ef1764f891185f832000000000000000431f15d746b6dbc023c5dc6ea97f972e9dae6854e8261385c3fa35425f697800200000000000000048086fa5e61fc81f283d0a142718f1476f225d00372f113ca6bf4984f333d10505000000000000002000000000000000316cbd778e5c5c564da8dc140fd187da18414e6588838e169b2f6e08195f560e2000000000000000e43047535479abd22783ef14b5467d2eaa025f33bba35d6fedf0e88c9c21e81b2000000000000000e8854e686fefd338201997d2b6c6ab686f7501d06909fc9a4769c3fb6594532f2000000000000000ec7050ff04366de3bb50e76cd4e181b297f07f972594167e48d2008db062ef292000000000000000f90ab29290ac2fada53b599cc7cb56ef1c8e320079381cdfb758ccc635e26c0d030000000000000020000000000000009feb96f6c0178252aa9d8374f749ea8fb133deca13a466f64d8a5374c9c40d002000000000000000e660a1643d195ff8ea55513b393216f34272d502c6257619317a025fec79ac0e20000000000000000fbbda1e14e9152c7ce977ac4d9b4fc70c634dc9bdb7f625c7afa466e8f11e1a200000000000000088647bc564dc5f1453c1327eaf244286b0de4e5773d5f5d939c640ece3932503040000000000000020000000000000006e6ff0af9d33354cfec6401cfa1589a3d862f006700353cc3e85dc93a0697d012000000000000000bb27654a79e6a30bb77b57e74b9c45b7cafb28a546edc019d52ce63e5aa89f2a20000000000000008151bddf52b3380c281fe30c381f516b9884d42cca576055806d9d9ad00b54092000000000000000158371cd229a8d5d6497a7cf7de688faedf319d0c8125fa69e230f0b1edbf52d2000000000000000feb09b092dfcbd89b8ba1a364d39e47d4e8b331cb7bcc03c612d890fd16a2e0f200000000000000044ccdb089dc205f4b7a0f0c8337cef0241f7f10957198d1948d9387e5de11087000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048805000000000000002000000000000000e45eb814b5026e1f8e6aaa76ac03fc28f9238132f150eb5b28574c43a4180eaf200000000000000033e6a308bac8b6c283fd4eb54e6fd618ef8dca2acd478106a48db8b39203de8620000000000000009e673f9500b3a7723a1ac4e56bbbdf09157cc36a96fc910a8c148f3e62ec6d132000000000000000d2919998cb09d10598b8cb9163b5cabf862d533b540a53adfa415b20f623aa10200000000000000058c0d0f1ab88efdc6d23511f8133088e0b7d2803c87f365a6f831b41eff41c2a05000000000000002000000000000000fd1138c68b0cbf6d27adc55e3c7ea5244e279e57d3a6083e73ef24b7ad08dbaf2000000000000000506bb7c46f518ce392aa9696351dd01fa4b7cc8035de1bad2b28096616bb35ab2000000000000000618ef1a3fcb175da8a835911021d20bb444cc1176afe1ebe4a4d7f02a8aee00d20000000000000006bfe2193a8265901e88fc30910fdc752365435542d7329c504b1a259174055ab20000000000000005f7ed0272991a0f81c37ad6b48c2d6a35c1757b8a8de966a593bde8706a6fbac2000000000000000b6199695cf9fc5cfa1d3fb060b280fdef270c03bc7c4e5b2ef1764f891185f832000000000000000431f15d746b6dbc023c5dc6ea97f972e9dae6854e8261385c3fa35425f697800200000000000000048086fa5e61fc81f283d0a142718f1476f225d00372f113ca6bf4984f333d10505000000000000002000000000000000316cbd778e5c5c564da8dc140fd187da18414e6588838e169b2f6e08195f560e2000000000000000e43047535479abd22783ef14b5467d2eaa025f33bba35d6fedf0e88c9c21e81b2000000000000000e8854e686fefd338201997d2b6c6ab686f7501d06909fc9a4769c3fb6594532f2000000000000000ec7050ff04366de3bb50e76cd4e181b297f07f972594167e48d2008db062ef292000000000000000f90ab29290ac2fada53b599cc7cb56ef1c8e320079381cdfb758ccc635e26c0d030000000000000020000000000000009feb96f6c0178252aa9d8374f749ea8fb133deca13a466f64d8a5374c9c40d002000000000000000e660a1643d195ff8ea55513b393216f34272d502c6257619317a025fec79ac0e20000000000000000fbbda1e14e9152c7ce977ac4d9b4fc70c634dc9bdb7f625c7afa466e8f11e1a200000000000000088647bc564dc5f1453c1327eaf244286b0de4e5773d5f5d939c640ece3932503040000000000000020000000000000006e6ff0af9d33354cfec6401cfa1589a3d862f006700353cc3e85dc93a0697d012000000000000000bb27654a79e6a30bb77b57e74b9c45b7cafb28a546edc019d52ce63e5aa89f2a20000000000000008151bddf52b3380c281fe30c381f516b9884d42cca576055806d9d9ad00b54092000000000000000158371cd229a8d5d6497a7cf7de688faedf319d0c8125fa69e230f0b1edbf52d2000000000000000feb09b092dfcbd89b8ba1a364d39e47d4e8b331cb7bcc03c612d890fd16a2e0f200000000000000044ccdb089dc205f4b7a0f0c8337cef0241f7f10957198d1948d9387e5de110870000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000081bafd7757534363ccbfd0aeba4ca27ed039c86a78b19b733ad3e632ba675ccb06808e46d6eda1c75751ea9acd3999a84784cf90f13d809203e1f9df28a3cea6ff6dd99f3317ebe0103b6805442512e913157e8df8dd0aa5e9241c677e4e6c5edec1946bbf2046aeead80bfcb4c31d5309ca470a4d423600bbeeec7906b5e96ee8c2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000081bafd7757534363ccbfd0aeba4ca27ed039c86a78b19b733ad3e632ba675ccb06808e46d6eda1c75751ea9acd3999a84784cf90f13d809203e1f9df28a3cea6ff6dd99f3317ebe0103b6805442512e913157e8df8dd0aa5e9241c677e4e6c5edec1946bbf2046aeead80bfcb4c31d5309ca470a4d423600bbeeec7906b5e96ee8c2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002ad210a311d4e33e4df3536e1463bde91a7c9867b76d1e9b69ae3e93297016cbcad210a311d4e33e4df3536e1463bde91a7c9867b76d1e9b69ae3e93297016cbc"
		inputBytes := []byte{0x29, 0xef, 0xb1, 0x48}

		inputBytes = append(inputBytes, common.Hex2Bytes(inputData)...)
		res, err := a.Run(inputBytes)
		assert.Nil(t, err)
		assert.Equal(t, byte(0), res[31])
	})

	t.Run("ownership", func(t *testing.T) {
		inputData := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160a87de24309bf8ba57890730a2705c0df8af512dea01d75bea6345a10c1f4e20f0000000000000000000000000000000000000000000000000000000000000d400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000cf4b43b2e2407d12f1baf349cbede13b2a739ce50000000000000000000000000000000000000000000000000000000000000020592d8d03ac161f8e606b967ad87b7079ed0659107066f3c4b26919451f115f1c0000000000000000000000000000000000000000000000000000000000000bab05000000000000002000000000000000c5a11ac788b7b68b3a002621341bf1e3a5b8d80ea477111c804a6969d025b9ae20000000000000006f85bbe45dfa55b6b863a6d760bbbad7572839e03027fdba6d0798abfce2239b20000000000000003d4f3e135f187ece3d86bc64bfd80cbb6390956d9ebbf05c03c0d516d7aa421220000000000000005014c58e208eb977187835a5e4eb9b474e025d974b15288778cfdd578a9c1704200000000000000006c63d211224d1daa28b48439e6ed47c62599348b1ea4b106095a683f2eed21605000000000000002000000000000000b42fdd63358b56a4413f54315944e2ff522b7b5e88e0ec7aa3c08ef79345789a200000000000000072075528369ea9097eb768731a1b32cdeabbf56d73174c1a1103839a7c1b342f2000000000000000c18f26435bb5e5c65d7be13e8a27470dc98595e5dbca101fffd8d6413feb96142000000000000000fdac9e725f38bff1424be37c1f7d447eb09814413c4ef865e3f0e6c684fe2e9f200000000000000082d649fb4db687b5aabbcaa9bf5bc86dd32b76817bb9cb04618ad8ef64c7fc022000000000000000d5feece8c8e1e380569ea5fe41acb812392b35820cc7dc92303d75f8497dbf8f2000000000000000e8fce0ab7a23ed9c913f1f039fd914422d3e11f8dd2f2295c818a83d549df11a20000000000000000ab1ba523a669e1c9b919b25b089e44f83355eda0bb03f27cbac0da7a9cdeb1c0500000000000000200000000000000063457468b995323cc2ad3815f0d1291537aa070347ee0466296cfd3505bd28272000000000000000cc7bfb00793817982097d8069da84804b53f09f0527fd38798b26e5109af1c0620000000000000005bc6c7b60af3095b3ca8212e39887c594ab10b5df2e79a2cf63630aee8396a1c20000000000000008ad2cf38e8629890ea98d9b7b4b6af7fdfb06abbf929979c8cd2f81d2184162c2000000000000000512cc9694d002deb978c53ef5413a0731b06dcb7e8f539cd62ec891178a5951c030000000000000020000000000000003ca92cdfef6781ce567253767eb4467c04baf3dbf516fa6d6829e3e0b1c6010420000000000000006d4a361a3719d1ae96f86fdc8eafa825ba570297a1a4ebabc0b78a94b31a62072000000000000000adccebd1d7eaed34fbee0ea0dcaa941efa8800bd51f9c5aad7caa776b7cdfa1a2000000000000000d4681a0d82b8a9dae0d029916b8fa77af473fb8d5a1512a1f77eca605bb35b0604000000000000002000000000000000d3487a8220d3ca005af4d026ac78fd65d0722f963691eae7072bb22db0099e012000000000000000f18310c4e37a9f5852715a33b87c2d90f82fa28cfbf3f22e2b6f3aa9e8990f2d20000000000000004744e0d0fab0ed7320633b37c242389d62f6802630ac0f23d185afb7ba5a982e20000000000000002b005143f2ecd1f89b17d2b2e2a6b95a8fdbd03596e12161482839a258c7782620000000000000001e029b9e2960c007dc4109b41337ac7c9aefe1c911280dfd9e33d9f6142df7182000000000000000fa69993cd9eda6a56588a57c00932f6fc6e05b9184a4663f2c3cd2209c7b7d990000000020000000000000006ad07ffead2eed32f4891ebee60875386ce71ca67602b97096c34aaf96f7c40a03000000000000002100000000000000ed96753bc7460198c38e532dd7486bf6c9bbbaa637acceab6fd3b5cc0fcbee38002100000000000000c77450b4b53e656bda4fb289b746166cfd63686885bd2873c74ee5b4bbad6c8c802100000000000000b945a40d499fb4a7bf7063f4371b0a64e6c2374449cbf100784e35ad96012be3000300000000000000200000000000000095cf147e128ef2d75b153a30cc37f7adedaacafea1781a05c82b0b3140946ca520000000000000003a1c389e5b73a504bdd545a4c46235d4ddeab525264e35cf08980c4d5adf3a6920000000000000001b64248cbd83cf96c16d3eb2f32c2c53bbd8e81cf8d6e11e55696a93031194722000000000000000fddb91ca10c9f3cb753dcf781bed95677700149968b91bc984123db4601b14052000000000000000286c20a0d4642bc1980d84409f3ca7f95c994af6bd41cd69a0ed19385e49dee520000000000000000819e99897c4c4a8a24077310db8a55331d231a682845967eaff8c78ddc0980003000000000000002100000000000000db5dedf36f5ce8e3173ac513ac957d0b5efb2ea1b667c632c4ca91bed8620fae002100000000000000c1a1ba2327d1ac72c8a9db3ff4dbf3272b68a73e0a4aca15dc6139cf80c1900c0021000000000000003d2540df801699ee3d71f5ae3c200965f16efaeed9bbfd6a35f726bb6dafbc3180f1040000000000007cd6cd6238b7f458d9d418a2162577bf9da7106dd7990b92425f20a752296dc180ac52afb603d2e077cfb601d0acfe967f02bd1b8175a76a5e3ff1276c447c5b58009119a2d53f0aa1e34e5352ca597a51043acf00d299fc66adc4ed293671ad658800000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000040dad1f0bfc18c856edb0c7f4bfac9e6b05e0837ea473dd2173f7cb6e56b4a3eb7000c4d7e76a623b8038116ef57ceec47a514fa96ee71d69989130bc54b464649f800938113b75e29d032f3d8e995767ab6975edf6fb901d2c04a1ec5463bed289a7b80b6a335bec920e6b4d0970730ebb41cc5a613bd154acbfe9f1d895e99e59e3fd98075a96f4aacd01099e7248cc447667aa64d66b2cf40cd93305b0d64a91257a3cd80bae1cf1a6880cbafbb2c031f980b9ce4ef8eb21b750d7c4d27686dae0fc8bed7ce0f84b3bcf6f3885817374832eebe40c6b72f25f7bfdf041249c5e2bdfe0061053dc3933b9943209ac9456f34b8f013ccf544fe4b8f2b1c8956c8d9a00d197c0b00000000000000ae683e80b1e418423ad2311b509ec4906d7c535e12af3dc176005e6f37e2db7f80484ff90d1400465c196a0bea07c25f4ca44b528c6fad08d19174a99c819cf18600027a2e24df0657ba46d96416dadc6fcc68adca708b670567edbb910ac372df580057da29ad805007083211dba90e0b36da84e2c8d3e8b46e19bfc9ae6f975c25688015580b35cde672c2924fabc7b06c1a2d54621e5cbe0b35d94d98b0bd174d2ab8802409af84793ce7eb46435d64bd9fb0f6d48d83c78889b3ad8e321f48716e4b8800b3ff88442f7cf6056191a840ccb7183372039dd8a9b5bbbd1cf7293a7cd24611003e5c48ec5ce763edc4123ec95923a1c92a066f7b09de07a1a3546a7b5896ac9480cae5760cde9f948da113061ee641f3bb150181fef8ae184bdb8c5444e385d395007c7479136689be45dc49a2031dce898d8527e98481862311d87efc62bfbde912808866f61a31e39d85ba9da1377058acfc364cb9ea008561305996f813e0cdf5b8000b0000000000000087ac1e67d1923f5e8af90b9da3b11248b19d25654fc8c9068a7de3b7c892f55b80b2e218b94227be88eb8878fbf620a4c0fb2ad506c1e8e28cfcf20170e0841f3d001f73eedda422d3ed6024f833e708560477d6f791c15f8210f7af63e7f9fe314180ab7d269692afae5f36fd2ea6b75e3d48ef56fbf90fd56f700c05e8dfffb5548200291ed8bec7c55c6af0e9849fc92f64dd7a7e2873c7ac39836b0e319f9438c16d80176c10ec9b68a2b18fa91a1516c319ef5251851ae1953e39e455565996d667e0005b5cf505799b1a23af11435845eac98936095869417c03653cb23bfecc1ff3dc00e673760bae3365f926aeb76844122758aa633625b8cbe2dbb13863514df3250b00a0efa20b3f6d546d53122cc920ca15555ab25cb86478e2a9899b71991797c8eb805a52de795a794977915a8146ee2fdfc90f36ad17134afe9801a46de7927336bd00a76cb65eace6de04394ee3b2fb8df4da8f98b9f097458f64f889f368f4f0ce2b800161a31d5c347cb1ac1e5164794ae1dffcd971dc6f725b05be72636f072857c0576ca5929266ef0b4150b0ccd85810441536c341dae3396006d31cc883fec64700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000"
		inputBytes := []byte{0x29, 0x7d, 0xb2, 0x29}
		inputBytes = append(inputBytes, common.Hex2Bytes(inputData)...)
		res, err := a.Run(inputBytes)
		assert.Nil(t, err)
		assert.Equal(t, byte(0), res[31])
	})
}

func TestAnemoi(t *testing.T) {
	a := &Anemoi{}
	t.Run("eval_jive4", func(t *testing.T) {
		inputData := "73808263b6b714840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003644ea1f2fc768cf2749997d154f34d16beb50249a19fab3386705997c594629"
		inputBytes := common.Hex2Bytes(inputData)
		res, err := a.Run(inputBytes)
		assert.Nil(t, err)
		fmt.Println(common.Bytes2Hex(res))

	})

	t.Run("temp", func(t *testing.T) {
		// first := "bc4f54ce0000000000000000000000000000000000000000000000000000000000000000"
		// firstBytes := common.Hex2Bytes(first)
		// res, err := a.Run(firstBytes)
		// assert.Nil(t, err)
		// fmt.Println(common.Bytes2Hex(res))
		// 3644ea1f2fc768cf2749997d154f34d16beb50249a19fab3386705997c594629
		inputData := "738082636a53d9a7051342adb81e637883005bc399c40c32c5d9f5e12cf0112a4066f22cc6e831f5f3d6eecddfa763199a633c9ab49b851c7112df7b59b17b87473a7217dcefbd4f25049ddf3ff781f89d638c98ea657bd7f616b04c54122b4cac03550d3644ea1f2fc768cf2749997d154f34d16beb50249a19fab3386705997c594629"
		inputBytes := common.Hex2Bytes(inputData)
		res, err := a.Run(inputBytes)
		assert.Nil(t, err)
		fmt.Println(common.Bytes2Hex(res))

		/// 8d1a8129419fa9b4353c88ed8d5b17c910fd1fc0b80bc9f74f67792eb9234c2c
		/// 8d1a8129419fa9b4353c88ed8d5b17c910fd1fc0b80bc9f74f67792eb9234c2c
	})

	t.Run("eval_jive4 2", func(t *testing.T) {
		inputData := "738082630000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003644ea1f2fc768cf2749997d154f34d16beb50249a19fab3386705997c594629"
		inputBytes := common.Hex2Bytes(inputData)
		res, err := a.Run(inputBytes)
		assert.Nil(t, err)
		fmt.Println(common.Bytes2Hex(res))

	})
	t.Run("anemoi_variable_length_hash", func(t *testing.T) {
		inputData := "47f3b0980000000000000000000000000000000000000000000000000000000137be295817412d25ba70f29bc3496dfdf0ff1a44754c307ff5cb5f749f6bc6b6a0c39f09"
		inputBytes := common.Hex2Bytes(inputData)
		res, err := a.Run(inputBytes)
		assert.Nil(t, err)
		fmt.Println(common.Bytes2Hex(res))
	})
	// 0x47f3b09800000000000000000000000000000000000000000000000000000062a32b155172b9cd2de6972234f8f8311127dda07164617f4a1e442478ddc2c0472450e514
	t.Run("anemoi_variable_length_hash 2", func(t *testing.T) {
		inputData := "47f3b09800000000000000000000000000000000000000000000000000000062a32b155172b9cd2de6972234f8f8311127dda07164617f4a1e442478ddc2c0472450e514"
		inputBytes := common.Hex2Bytes(inputData)
		res, err := a.Run(inputBytes)
		assert.Nil(t, err)
		fmt.Println(common.Bytes2Hex(res))
	})
}
